// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	domain "github.com/xloki21/alias/internal/domain"
)

// MockAliasRepo is an autogenerated mock type for the aliasRepo type
type MockAliasRepo struct {
	mock.Mock
}

type MockAliasRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAliasRepo) EXPECT() *MockAliasRepo_Expecter {
	return &MockAliasRepo_Expecter{mock: &_m.Mock}
}

// Find provides a mock function with given fields: ctx, key
func (_m *MockAliasRepo) Find(ctx context.Context, key string) (*domain.Alias, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 *domain.Alias
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Alias, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Alias); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Alias)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAliasRepo_Find_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Find'
type MockAliasRepo_Find_Call struct {
	*mock.Call
}

// Find is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockAliasRepo_Expecter) Find(ctx interface{}, key interface{}) *MockAliasRepo_Find_Call {
	return &MockAliasRepo_Find_Call{Call: _e.mock.On("Find", ctx, key)}
}

func (_c *MockAliasRepo_Find_Call) Run(run func(ctx context.Context, key string)) *MockAliasRepo_Find_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAliasRepo_Find_Call) Return(_a0 *domain.Alias, _a1 error) *MockAliasRepo_Find_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAliasRepo_Find_Call) RunAndReturn(run func(context.Context, string) (*domain.Alias, error)) *MockAliasRepo_Find_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: ctx, key
func (_m *MockAliasRepo) Remove(ctx context.Context, key string) error {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAliasRepo_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type MockAliasRepo_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *MockAliasRepo_Expecter) Remove(ctx interface{}, key interface{}) *MockAliasRepo_Remove_Call {
	return &MockAliasRepo_Remove_Call{Call: _e.mock.On("Remove", ctx, key)}
}

func (_c *MockAliasRepo_Remove_Call) Run(run func(ctx context.Context, key string)) *MockAliasRepo_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAliasRepo_Remove_Call) Return(_a0 error) *MockAliasRepo_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAliasRepo_Remove_Call) RunAndReturn(run func(context.Context, string) error) *MockAliasRepo_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: ctx, aliases
func (_m *MockAliasRepo) Save(ctx context.Context, aliases []domain.Alias) error {
	ret := _m.Called(ctx, aliases)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Alias) error); ok {
		r0 = rf(ctx, aliases)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAliasRepo_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type MockAliasRepo_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - ctx context.Context
//   - aliases []domain.Alias
func (_e *MockAliasRepo_Expecter) Save(ctx interface{}, aliases interface{}) *MockAliasRepo_Save_Call {
	return &MockAliasRepo_Save_Call{Call: _e.mock.On("Save", ctx, aliases)}
}

func (_c *MockAliasRepo_Save_Call) Run(run func(ctx context.Context, aliases []domain.Alias)) *MockAliasRepo_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]domain.Alias))
	})
	return _c
}

func (_c *MockAliasRepo_Save_Call) Return(_a0 error) *MockAliasRepo_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAliasRepo_Save_Call) RunAndReturn(run func(context.Context, []domain.Alias) error) *MockAliasRepo_Save_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAliasRepo creates a new instance of MockAliasRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAliasRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAliasRepo {
	mock := &MockAliasRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
