// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockEventProducer is an autogenerated mock type for the eventProducer type
type MockEventProducer struct {
	mock.Mock
}

type MockEventProducer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEventProducer) EXPECT() *MockEventProducer_Expecter {
	return &MockEventProducer_Expecter{mock: &_m.Mock}
}

// Produce provides a mock function with given fields: event
func (_m *MockEventProducer) Produce(event interface{}) {
	_m.Called(event)
}

// MockEventProducer_Produce_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Produce'
type MockEventProducer_Produce_Call struct {
	*mock.Call
}

// Produce is a helper method to define mock.On call
//   - event interface{}
func (_e *MockEventProducer_Expecter) Produce(event interface{}) *MockEventProducer_Produce_Call {
	return &MockEventProducer_Produce_Call{Call: _e.mock.On("Produce", event)}
}

func (_c *MockEventProducer_Produce_Call) Run(run func(event interface{})) *MockEventProducer_Produce_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *MockEventProducer_Produce_Call) Return() *MockEventProducer_Produce_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockEventProducer_Produce_Call) RunAndReturn(run func(interface{})) *MockEventProducer_Produce_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEventProducer creates a new instance of MockEventProducer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEventProducer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEventProducer {
	mock := &MockEventProducer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
