// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockKeyGenerator is an autogenerated mock type for the keyGenerator type
type MockKeyGenerator struct {
	mock.Mock
}

type MockKeyGenerator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockKeyGenerator) EXPECT() *MockKeyGenerator_Expecter {
	return &MockKeyGenerator_Expecter{mock: &_m.Mock}
}

// Generate provides a mock function with given fields: n
func (_m *MockKeyGenerator) Generate(n int) (string, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (string, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(int) string); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockKeyGenerator_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type MockKeyGenerator_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
//   - n int
func (_e *MockKeyGenerator_Expecter) Generate(n interface{}) *MockKeyGenerator_Generate_Call {
	return &MockKeyGenerator_Generate_Call{Call: _e.mock.On("Generate", n)}
}

func (_c *MockKeyGenerator_Generate_Call) Run(run func(n int)) *MockKeyGenerator_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockKeyGenerator_Generate_Call) Return(_a0 string, _a1 error) *MockKeyGenerator_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockKeyGenerator_Generate_Call) RunAndReturn(run func(int) (string, error)) *MockKeyGenerator_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockKeyGenerator creates a new instance of MockKeyGenerator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockKeyGenerator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockKeyGenerator {
	mock := &MockKeyGenerator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
